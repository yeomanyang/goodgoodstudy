/* 支持class嵌套写法 */

div {
    p {
        text-decoration: underline;
    }
}

/* 支持&来获得父级选择器 */

a {
    &:hover {
        text-decoration: underline;
    }
}

/* 支持样式属性的嵌套写法 */

.funky {
    font: {
        family: fantasy;
        size: 30em;
        weight: bold;
    }
}

/* 支持*Placeholder Selectors* */

.btn {
    color: #333;
}

.primary-btn {
    @extend .btn;
}

%btn {
    color: #333;
}

.primary-btn {
    @extend %btn;
}

/* 支持数字运算 */

.number {
    width: (1em + 2em) * 3;
}

/* Interpolation 插值  */

$name: foo;
$attr: border;
p.#{$name} {
    #{$attr}-color: blue;
}

/* SassScript中的& */

.foo.bar .baz.bang,
.bip.qux {
    $selector: &;
}

/* 变量默认 */

$content: "First content";
$content: "Second content?" !default;
$new_content: "First time reference" !default;
#main {
    content: $content;
    new-content: $new_content;
}

/* @at-root */

.parent {
    color: #000;
    @at-root .child {
        color: #fff;
    }
}

@media print {
    .page {
        @at-root (without: media) {
            color: red;
        }
    }
}

/* if() */

.if {
    width: if(true, 1px, 2px);
    height: if(false, 1px, 2px);
}

/* @if */

$type: monster;
p {
    @if $type==ocean {
        color: blue;
    }
    @else if $type==matador {
        color: red;
    }
    @else if $type==monster {
        color: green;
    }
    @else {
        color: black;
    }
}

/* @for */

@for $i from 1 through 3 {
    .item-#{$i} {
        width: 2em * $i;
    }
}

/* @each */

@each $i in 1,
2,
3 {
    .item-#{$i} {
        width: 2em * $i;
    }
}

/* Function */

$grid-width: 40px;
$gutter-width: 10px;
@function grid-width($n) {
    @return $n * $grid-width+($n - 1) * $gutter-width;
}

#sidebar {
    width: grid-width(5);
}

/* mixins */

@mixin silly-links($color) {
    a {
        color: $color;
        background-color: red;
    }
}

@include silly-links(blue);
@mixin box-shadow($shadows...) {
    box-shadow: $shadows;
}

.shadows {
    @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
}

$color: white;
@mixin colors($color: blue) {
    background-color: $color;
    @content;
    border-color: $color;
}

.colors {
    @include colors {
        color: $color;
    }
}

$elementSeparator: "__";
$modifierSeparator: "--";
@function selectorToString($selector) {
    $selector: inspect($selector); //cast to string
    $selector: str-slice($selector, 2, -2); //remove bracket
    @return $selector;
}

@function containsModifier($selector) {
    $selector: selectorToString($selector);
    @if str-index($selector, $modifierSeparator) {
        @return true;
    }
    @else {
        @return false;
    }
}

// @function getBlock($selector) {
//     $selector: selectorToString($selector);
//     $modifierStart: str-index($selector, $modifierSeparator) — 1;
//     @return str-slice($selector, 0, $modifierStart);
// }
@mixin b($block) {
    $B: 'kl-'+$block !global;
    .#{$B} {
        @content;
    }
}

// @mixin e($element) {
//     @at-root {
//         #{&}#{$elementSeparator+$element} {
//             @content;
//         }
//     }
// }

@mixin e($element) {
    $selector: &;
    // $block: getBlock($selector);
    @if containsModifier($selector) {
        @at-root {
            #{$selector} {
                #{'.'+$B+$elementSeparator+$element} {
                    @content;
                }
            }
       }
    }
    @else {
        @at-root {
            #{$selector+$elementSeparator+$element} {
                @content;
            }
        }
    }
}

@mixin m($modifier) {
    @at-root {
        #{&}#{$modifierSeparator+$modifier} {
            @content;
        }
    }
}


@include b($block: header) {
    color: #333;
    @include e($element: title) {
        line-height: 1px;
        @include m($modifier: disabled) {
            cursor: wait;
        }
    }
}

@include b($block: header) {
    color: #333;
    @include m($modifier: disabled) {
        line-height: 1px;
        @include e($element: title) {
            cursor: wait;
        }
    }
}

